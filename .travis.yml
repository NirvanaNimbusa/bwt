language: rust
rust:
  - stable
cache:
  cargo: true
  directories:
    - $HOME/docker-cache

before_install:
  - ./scripts/ci-deps.sh
  - export PATH=/opt/bin:$PATH

  # Load cached docker images, identified by the hash of the Dockerfiles
  - export DOCKER_CACHE=$HOME/docker-cache/images-$(
         sha256sum scripts/builder*.Dockerfile | sha256sum | head -c16
       ).tar.gz
  - test -f $DOCKER_CACHE && gzip -d < $DOCKER_CACHE | docker load || true

before_cache:
  - docker save bwt-builder bwt-builder-osx | gzip -2 > $DOCKER_CACHE

script:
  - cargo fmt -- --check
  - ./scripts/check.sh
  - cargo clippy --all-targets --all-features
  - ./test/tests.sh

  # Build releases and report reproducibe shasums
  - >
    (docker inspect bwt-builder &> /dev/null || docker build -t bwt-builder -f scripts/builder.Dockerfile .) &&
    (docker inspect bwt-builder-osx &> /dev/null || docker build -t bwt-builder-osx -f scripts/builder-osx.Dockerfile .) &&

    [ -n "$PREPARE_CACHE_ONLY" ] || (
      docker_mounts="-v `pwd`:/usr/src/bwt -v ${CARGO_HOME:-$HOME/.cargo}:/usr/local/cargo" &&
      docker run $docker_mounts bwt-builder &&
      docker run $docker_mounts bwt-builder-osx &&
      echo '-----BEGIN SHA256SUM-----' &&
      (cd dist && sha256sum *) | sort &&
      echo ''
    )

# Running the full build without any cache may exceed Travis's 50 minutes limit.
# If this happens, its possible to run the CI once with PREPARE_CACHE_ONLY to
# populate the caches, then restart it to build the releases themselves.
